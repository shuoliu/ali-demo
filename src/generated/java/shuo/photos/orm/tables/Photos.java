/*
 * This file is generated by jOOQ.
*/
package shuo.photos.orm.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import shuo.photos.orm.Keys;
import shuo.photos.orm.Public;
import shuo.photos.orm.tables.records.PhotosRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Photos extends TableImpl<PhotosRecord> {

    private static final long serialVersionUID = -890427328;

    /**
     * The reference instance of <code>public.photos</code>
     */
    public static final Photos PHOTOS = new Photos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhotosRecord> getRecordType() {
        return PhotosRecord.class;
    }

    /**
     * The column <code>public.photos.id</code>.
     */
    public final TableField<PhotosRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.photos.uploaded_time</code>.
     */
    public final TableField<PhotosRecord, LocalDateTime> UPLOADED_TIME = createField("uploaded_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.photos.name</code>.
     */
    public final TableField<PhotosRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.photos.oss_path</code>.
     */
    public final TableField<PhotosRecord, String> OSS_PATH = createField("oss_path", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.photos</code> table reference
     */
    public Photos() {
        this("photos", null);
    }

    /**
     * Create an aliased <code>public.photos</code> table reference
     */
    public Photos(String alias) {
        this(alias, PHOTOS);
    }

    private Photos(String alias, Table<PhotosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Photos(String alias, Table<PhotosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PhotosRecord> getPrimaryKey() {
        return Keys.PHOTOS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PhotosRecord>> getKeys() {
        return Arrays.<UniqueKey<PhotosRecord>>asList(Keys.PHOTOS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Photos as(String alias) {
        return new Photos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Photos rename(String name) {
        return new Photos(name, null);
    }
}
